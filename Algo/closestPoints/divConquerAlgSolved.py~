# Input: A set of points in 2D
# Output: the closest pair

from __future__ import print_function
import sys
import math
import time
import matplotlib.pyplot as plt

def distance(a,b):
    return math.sqrt((b[0] - a[0])**2 + (b[1] - a[1])**2)
    
def readPointsFromFile(fName):
    try:
        inpFile=open(fName,'r')
        lst=[]
        id = 0
        for l in inpFile:
            l = l.strip()
            pList=l.split(',')
            xI = float(pList[0])
            yI = float(pList[1])
            lst.append((xI,yI))
            id = id+1
        return lst
            
    except IOError as e:
        print('Exception encountered opening file',fName)
        sys.exit(1)

def visualizePoints(lst):
    # Plot all the points
    plt.style.use('ggplot')
    fig,ax = plt.subplots()
    ax.set_xlim(-50,50)
    ax.set_ylim(-50,50)
    for (x,y) in lst:
        ax.add_patch(plt.Circle((x,y), radius=0.3,color='r'))
        print(x,',',y)
    return plt, ax

#Function: bruteForceMinPairSearch
# Input: lst of (x,y) points.
# Output: tuple consisting of (pt1, pt2, minDist)

def bruteForceMinPairSearch(lst):
    # Iterate through the list twice
    n = len(lst)
    assert(n >= 2)
    # Maintain the best distance so far and the two points that achieve it.
    minDist = float('inf')
    pt1 = None
    pt2 = None
    # TODO: Fill in brute force code in class. Do 
    for i in range(0,n-1):
        for j in range(i+1, n):
            d = distance(lst[i],lst[j])
            if (d < minDist):
                minDist = d
                pt1 = lst[i]
                pt2 = lst[j]

    # TODO: return a triple ( (x1,y1), (x2,y2), minDist )
    return (pt1, pt2, minDist)



#Function: divAndConquerSearch
#Input: lst of (x,y) points
#Output: tuple consisting of (pt1, pt2, minDist)

def divAndConquerSearch(lst,plt, ax,depth):
    n = len(lst)
    #1. If list size is smaller than THRESHOLD, resort simply to bruteForceMinPairSearch
    if (n < 10):
        return bruteForceMinPairSearch(lst)
    #2. Assume list is sorted along x co-ordinates. Find middle x value and split into two lists along vertical line.
    (midx1, midy1) = lst[n//2-1]
    (midx2, midy2) = lst[n//2]
    midx = 0.5*(midx1 + midx2)
    # Visualize by drawing a line
    if (depth <= 3):
        ax.plot([midx,midx],[-50,50],color='b',linestyle='--',linewidth=0.5)
    
    #3. Recursively find the minimum pairs in left and right half.
    (p11, p12, delta1) = divAndConquerSearch(lst[0:n//2],plt,ax,depth+1)
    (p21, p22, delta2) = divAndConquerSearch(lst[n//2:n],plt,ax,depth+1)

    
    #4. Compute delta: the minimum of the two minimums and the corresponding points.
    (delta, pt1, pt2) = min( (delta1, p11, p12), (delta2, p21, p22) )
    #5. Find a strip of points whose x values are plus/minus delta from middle X value.
    stripLst = []
    for pt in lst:
        if (pt[0] <= midx + delta and pt[0] >= midx - delta ):
            stripLst.append(pt)
    # Visualization Code
    if (depth <= 3):
        ax.add_patch( plt.Rectangle( (midx-delta,-50), 2*delta, 100, alpha=0.3))
    #6. Sort this strip using y co-ordinate values
    strip = sorted(stripLst, key = lambda elt: elt[1])
    nStrip = len(strip)
    #7. Iterate through this list to see if a pair of points with distance < delta can be found in this strip.

    for i in range(0,nStrip-1):
        r = min(nStrip,i+8)
        for j in range(i+1, r):
            d = distance(stripLst[i],stripLst[j])
            (delta,pt1, pt2) = min (  (delta, pt1, pt2), (d, stripLst[i],stripLst[j]) )
            
    #8. Return the best pair of points and the min distance.
    return (pt1, pt2, delta)
    
def main(fName):
    lst0 = readPointsFromFile(fName)
    # Make a list that is sorted along x co-ordinates
    lst = sorted(lst0, key = lambda elt: elt[0])
    plt,ax = visualizePoints(lst)
    t0 = time.clock()
    (pt1, pt2, delta) = bruteForceMinPairSearch(lst)
    t1 = time.clock()
    print('Brute Force Search Yields: ',pt1, ',' , pt2,' with distance = ', delta)
    print('Time elapsed in Brute Force is ',(t1 - t0))
    t0 = time.clock()
    (p1, p2, d) = divAndConquerSearch(lst,plt,ax,0)
    t1 = time.clock()
    print('Divide and Conquer Search Yields: ',p1, ',' , p2,' with distance = ', d)
    print('Time elapsed in Divide and Conquer is ',(t1 - t0))
    plt.show()
    
    


if __name__ == '__main__':
    if (len(sys.argv) <= 1):
        fName = 'test'
    else:
        fName = sys.argv[1]
    main(fName)
