# william mortl
# solution to econ problem in CSCI 3104 lecture

# requires glpsol and glpk
# to run: glpsol --math EconProblem.ampl

# 25 investment variables
var x1;
var x2;
var x3;
var x4;
var x5;
var x6;
var x7;
var x8;
var x9;
var x10;
var x11;
var x12;
var x13;
var x14;
var x15;
var x16;
var x17;
var x18;
var x19;
var x20;
var x21;
var x22;
var x23;
var x24;
var x25;

# objective
maximize objVal: 1.451452901 * x1 + 2.682843075 * x2 + 8.843506766 * x3 + 5.897847483 * x4 + 6.454061344 * x5 + 6.610692622 * x6 + 2.10204864 * x7 + 5.708680502 * x8 + 4.518959322 * x9 + 7.17550058 * x10 + 7.230601311 * x11 + 3.323069031 * x12 + 1.343294744 * x13 + 6.07547282 * x14 + 5.718140812 * x15 + 7.442287363 * x16 + 8.754234951 * x17 + 1.234320331 * x18 + 4.679942498 * x19 + 3.568497768 * x20 + 7.228742821 * x21 + 2.819427713 * x22 + 9.588593287 * x23 + 7.86954114 * x24 + 6.497411587 * x25;

# only have $10,000
c1: 2.563417584 * x1 + 4.307262492 * x2 + 12.23622492 * x3 + 6.422297181 * x4 + 8.796409573 * x5 + 6.89511491 * x6 + 3.48768834 * x7 + 6.581297865 * x8 + 8.992592569 * x9 + 11.48052129 * x10 + 9.731387611 * x11 + 3.450688877 * x12 + 1.979528704 * x13 + 11.73019181 * x14 + 9.269512612 * x15 + 10.15965528 * x16 + 15.65033026 * x17 +1.96121653 * x18 + 9.299678395 * x19 + 3.657179365 * x20 + 11.6717136 * x21 + 3.048761514 * x22 + 10.87695869 * x23 + 10.96673476 * x24 + 12.13653012 * x25 <= 10000;

# >= 0 conditions
c2: x1 >= 0;
c3: x2 >= 0;
c4: x3 >= 0;
c5: x4 >= 0;
c6: x5 >= 0;
c7: x6 >= 0;
c8: x7 >= 0;
c9: x8 >= 0;
c10: x9 >= 0;
c11: x10 >= 0;
c12: x11 >= 0;
c13: x12 >= 0;
c14: x13 >= 0;
c15: x14 >= 0;
c16: x15 >= 0;
c17: x16 >= 0;
c18: x17 >= 0;
c19: x18 >= 0;
c20: x19 >= 0;
c21: x20 >= 0;
c22: x21 >= 0;
c23: x22 >= 0;
c24: x23 >= 0;
c25: x24 >= 0;
c26: x25 >= 0;

# risk A
c27: 2.563417584 * x1 + 12.23622492 * x3 + 6.89511491 * x6 + 3.48768834 * x7 + 9.731387611 * x11 + 1.979528704 * x13 + 10.15965528 * x16 + 11.6717136 * x21 + 3.048761514 * x22 >= 0.15 * 10000;
c28: 2.563417584 * x1 + 12.23622492 * x3 + 6.89511491 * x6 + 3.48768834 * x7 + 9.731387611 * x11 + 1.979528704 * x13 + 10.15965528 * x16 + 11.6717136 * x21 + 3.048761514 * x22 <= 0.35 * 10000;

# risk B
c29: 4.307262492 * x2 + 6.581297865 * x8 + 8.992592569 * x9 + 11.73019181 * x14 + 15.65033026 * x17 + 10.87695869 * x23 + 10.96673476 * x24 >= 0.45 * 10000;
c30: 4.307262492 * x2 + 6.581297865 * x8 + 8.992592569 * x9 + 11.73019181 * x14 + 15.65033026 * x17 + 10.87695869 * x23 + 10.96673476 * x24 <= 0.65 * 10000;

# risk C
c31: 6.422297181 * x4 + 11.48052129 * x10 + 9.269512612 * x15 + 1.96121653 * x18 + 12.13653012 * x25 >= 0.1 * 10000;
c32: 6.422297181 * x4 + 11.48052129 * x10 + 9.269512612 * x15 + 1.96121653 * x18 + 12.13653012 * x25 <= 0.3 * 10000;

# risk D
c33: 8.796409573 * x5 + 3.450688877 * x12 + 9.299678395 * x19 + 3.657179365 * x20 >= 0.05 * 10000;
c34: 8.796409573 * x5 + 3.450688877 * x12 + 9.299678395 * x19 + 3.657179365 * x20 <= 0.25 * 10000;

# tech
c35: 2.563417584 * x1 + 12.23622492 * x3 + 6.89511491 * x6 + 9.731387611 * x11 + 3.450688877 * x12 + 1.979528704 * x13 + 11.73019181 * x14 + 1.96121653 * x18 + 10.96673476 * x24 >= 0.0 * 10000;
c36: 2.563417584 * x1 + 12.23622492 * x3 + 6.89511491 * x6 + 9.731387611 * x11 + 3.450688877 * x12 + 1.979528704 * x13 + 11.73019181 * x14 + 1.96121653 * x18 + 10.96673476 * x24 <= 0.3 * 10000;

# finance
c37: 4.307262492 * x2 + 6.422297181 * x4 + 6.581297865 * x8 + 8.992592569 * x9 + 11.48052129 * x10 + 3.657179365 * x20 + 12.13653012 * x25 >= 0.0 * 10000;
c38: 4.307262492 * x2 + 6.422297181 * x4 + 6.581297865 * x8 + 8.992592569 * x9 + 11.48052129 * x10 + 3.657179365 * x20 + 12.13653012 * x25 <= 0.40 * 10000;

# petro
c39: 8.796409573 * x5 + 3.48768834 * x7 + 9.269512612 * x15 + 11.6717136 * x21 >= 0.0 * 10000;
c40: 8.796409573 * x5 + 3.48768834 * x7 + 9.269512612 * x15 + 11.6717136 * x21 <= 0.5 * 10000;

# auto
c41: 10.15965528 * x16 + 15.65033026 * x17 + 9.299678395 * x19 + 3.048761514 * x22 + 10.87695869 * x23 >= 0.0 * 10000;
c42: 10.15965528 * x16 + 15.65033026 * x17 + 9.299678395 * x19 + 3.048761514 * x22 + 10.87695869 * x23 <= 0.7 * 10000;

# eco (did the opposite constraint by bounding non-eco as [0, 90], this
# 	ensures that eco is in fact [10, 100]
c43: 8.796409573 * x5 + 3.48768834 * x7 + 6.581297865 * x8 + 9.731387611 * x11 + 3.450688877 * x12 + 1.979528704 * x13 + 15.65033026 * x17 + 9.299678395 * x19 + 3.657179365 * x20 + 10.87695869 * x23 + 12.13653012 * x25 >= 0.0 * 10000;
c44: 8.796409573 * x5 + 3.48768834 * x7 + 6.581297865 * x8 + 9.731387611 * x11 + 3.450688877 * x12 + 1.979528704 * x13 + 15.65033026 * x17 + 9.299678395 * x19 + 3.657179365 * x20 + 10.87695869 * x23 + 12.13653012 * x25 <= 0.90 * 10000;

# solve and show
solve;
display x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25; 
end;
